package coupon.system.core.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import coupon.system.core.beans.Category;
import coupon.system.core.beans.Coupon;
import coupon.system.core.connection.ConnectionPool;
import coupon.system.core.exceptions.CouponSystemException;

public class CouponsDAODb implements CouponsDAO {
	private Connection con = null;

	@Override
	public void addCoupon(Coupon coupon) throws CouponSystemException {
		String sqlCommand = "INSERT INTO coupon values(0,?,?,?,?,?,?,?,?,?)";
		try {
			con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand, Statement.RETURN_GENERATED_KEYS)) {
				preSt.setInt(1, coupon.getCompanyiD());
				preSt.setInt(2, coupon.getCategory().ordinal());
				preSt.setString(3, coupon.getTitle());
				preSt.setString(4, coupon.getDescription());
				preSt.setDate(5, Date.valueOf(coupon.getStartDate()));
				preSt.setDate(6, Date.valueOf(coupon.getEndDate()));
				preSt.setInt(7, coupon.getAmount());
				preSt.setDouble(8, coupon.getPrice());
				preSt.setString(9, coupon.getImage());
				preSt.executeUpdate();
				ResultSet rs = preSt.getGeneratedKeys();
				rs.next();
				int autoGeneratedId = rs.getInt(1);
				coupon.setId(autoGeneratedId);
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, add Coupon failed", e);
		} finally {
			returnConnection(con);
		}
	}

	@Override
	public void updateCoupon(Coupon coupon) throws CouponSystemException {

		String sqlCommand = "UPDATE coupon SET `company_id`=?, `category_id`=?, `title`=?,"
				+ " `description`=?, `start_date`=?, `end_date`=?, `amount`=?, `price`=?, `image`=? WHERE id=?";
		try {
			con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand)) {
				preSt.setInt(1, coupon.getCompanyiD());
				preSt.setInt(2, coupon.getCategory().ordinal());
				preSt.setString(3, coupon.getTitle());
				preSt.setString(4, coupon.getDescription());
				preSt.setDate(5, Date.valueOf(coupon.getStartDate()));
				preSt.setDate(6, Date.valueOf(coupon.getEndDate()));
				preSt.setInt(7, coupon.getAmount());
				preSt.setDouble(8, coupon.getPrice());
				preSt.setString(9, coupon.getImage());
				preSt.setInt(10, coupon.getId());
				int rowCount = preSt.executeUpdate();
				if (rowCount == 0) {
					throw new CouponSystemException(
							"Error has occurred, coupon id " + coupon.getId() + " was not found");
				}
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, update coupon failed", e);
		} finally {
			returnConnection(con);
		}

	}

	@Override
	public void deleteCoupon(int couponId) throws CouponSystemException {

		String sqlCommand = "DELETE FROM coupon WHERE id=?";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				preSt.setInt(1, couponId);
				int rowsCount = preSt.executeUpdate();
				if (rowsCount == 0) {
					throw new CouponSystemException("Error has occurred, coupon id " + couponId + " was not found");
				}
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, delete coupon failed", e);
		} finally {
			returnConnection(con);
		}
	}

	@Override
	public List<Coupon> getAllCoupons() throws CouponSystemException {
		String sqlCommand = "SELECT * FROM coupon";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				List<Coupon> couponList = new ArrayList<Coupon>();
				ResultSet rs = preSt.executeQuery();
				if (!rs.next()) {
					throw new CouponSystemException("Error has occurred, there are no coupons available");
				}
				do {
					couponList.add(new Coupon(rs.getInt(1), rs.getInt(2), Category.values()[rs.getInt(3)],
							rs.getString(4), rs.getString(5), LocalDate.parse(rs.getDate(6).toString()),
							LocalDate.parse(rs.getDate(7).toString()), rs.getInt(8), rs.getDouble(9),
							rs.getString(10)));
				} while (rs.next());
				return couponList;
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, while trying to get all coupons information", e);
		} finally {
			returnConnection(con);
		}
	}

	@Override
	public Coupon getOneCoupon(int couponId) throws CouponSystemException {
		String sqlCommand = "SELECT * FROM coupon WHERE id=?";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				preSt.setInt(1, couponId);
				ResultSet rs = preSt.executeQuery();
				if (!rs.next()) {
					throw new CouponSystemException("Error has occurred, coupon id " + couponId + " was not found");
				}
				return new Coupon(rs.getInt(1), rs.getInt(2), Category.values()[rs.getInt(3)], rs.getString(4),
						rs.getString(5), LocalDate.parse(rs.getDate(6).toString()),
						LocalDate.parse(rs.getDate(7).toString()), rs.getInt(8), rs.getDouble(9), rs.getString(10));
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, get coupon failed", e);

		} finally {
			returnConnection(con);
		}
	}

	@Override
	public void addCouponPurchase(int customerId, int couponId) throws CouponSystemException {
		String sqlCommand = " INSERT INTO customer_vs_coupon values(?, ?)";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				preSt.setInt(1, customerId);
				preSt.setInt(2, couponId);
				preSt.executeUpdate();
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, add coupon purchase failed", e);
		} finally {
			returnConnection(con);
		}
	}

	@Override
	public void deleteCouponPurchase(int customerId, int couponId) throws CouponSystemException {

		String sqlCommand = " DELETE FROM customer_vs_coupon WHERE customer_id=? and coupon_id=?";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				preSt.setInt(1, customerId);
				preSt.setInt(2, couponId);
				int rowCount = preSt.executeUpdate();
				if (rowCount == 0) {
					throw new CouponSystemException("Error has occurred, Customer id " + customerId + " and Coupon id "
							+ couponId + " purchase was not found");
				}
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, delete coupon purchase failed", e);
		} finally {
			returnConnection(con);
		}

	}

	private void returnConnection(Connection c) throws CouponSystemException {
		try {
			if (c != null) {
				ConnectionPool.getInstance().restoreConnection(c);
				c = null;
			}
		} catch (SQLException ex) {
			throw new CouponSystemException("Error has occurred while trying restore the connection", ex);
		}
	}
}
