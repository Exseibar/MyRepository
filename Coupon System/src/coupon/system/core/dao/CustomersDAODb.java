package coupon.system.core.dao;

import coupon.system.core.beans.Customer;
import coupon.system.core.connection.ConnectionPool;
import coupon.system.core.exceptions.CouponSystemException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

        public class CustomersDAODb implements CustomersDAO{

    private Connection con;

    public CustomersDAODb(){
        con = null;
    }

    @Override
    public boolean isCustomerExist(String email, String password) throws CouponSystemException {
        try{
            String sqlCommand = "SELECT id FROM customer WHERE email = ? AND password = ?";
            con = ConnectionPool.getInstance().getConnection();
            try(
                    PreparedStatement preSt = con.prepareStatement(sqlCommand)
            ) {

                preSt.setString(1, email);
                preSt.setString(2, password);

                ResultSet rs = preSt.executeQuery();
                return rs.next();
            }
        } catch (SQLException e) {
            throw new CouponSystemException("Error has occurred while trying to get a Customer out of the DB" , e);

        }finally{
            returnConnection(con);
        }
    }
    @Override
    public void addCustomer(Customer Customer)  throws CouponSystemException{
        String sqlCommand = "INSERT INTO customer values(0,?,?,?,?)"; // id\name\email\password
        try {
            con = ConnectionPool.getInstance().getConnection();
            try (
                    PreparedStatement preSt = con.prepareStatement(sqlCommand, Statement.RETURN_GENERATED_KEYS)
            ) {
                preSt.setString(1, Customer.getFirstName());
                preSt.setString(2, Customer.getLastName());
                preSt.setString(3, Customer.getEmail());
                preSt.setString(4, Customer.getPassword());
                preSt.executeUpdate();
                ResultSet rs = preSt.getGeneratedKeys();
                rs.next();
                int autoGeneratedId = rs.getInt(1);
                Customer.setId(autoGeneratedId);
            }
        }catch (SQLException e) {
            throw new CouponSystemException("Error has occurred, add Customer failed", e);
        }finally{
            returnConnection(con);
        }
    }
    @Override
    public void updateCustomer(Customer Customer) throws  CouponSystemException{
        String sqlCommand = "UPDATE customer SET `first_name`=?, `last_name`=?, `email`=?, `password`=? where id=?";
        try {
            con = ConnectionPool.getInstance().getConnection();
            try (
                    PreparedStatement preSt = con.prepareStatement(sqlCommand)
            ) {
                preSt.setString(1, Customer.getFirstName());
                preSt.setString(2, Customer.getLastName());
                preSt.setString(3, Customer.getEmail());
                preSt.setString(4, Customer.getPassword());
                preSt.setInt(5, Customer.getId());
                int rowCount = preSt.executeUpdate();
                if(rowCount == 0){
                    throw new CouponSystemException("Error has occurred, Customer id " + Customer.getId()  + " was not found");
                }
            }
        }catch (SQLException e) {
            throw new CouponSystemException("Error has occurred, update Customer failed", e);
        }finally{
            returnConnection(con);
        }
    }
    @Override
    public void deleteCustomer(int CustomerId) throws CouponSystemException{
        String sqlCommand = "DELETE FROM customer where id=?";
        try{
            Connection con = ConnectionPool.getInstance().getConnection();
            try(
                    PreparedStatement preSt = con.prepareStatement(sqlCommand);
            ){
                preSt.setInt(1, CustomerId);
                int rowsCount = preSt.executeUpdate();
                if(rowsCount == 0){
                    throw new CouponSystemException("Error has occurred, Customer id " + CustomerId  + " was not found");
                }
            }
        }catch (SQLException e){
            throw new CouponSystemException("Error has occurred, delete Customer failed" , e);
        }finally{
            returnConnection(con);
        }
    }
    @Override
    public List<Customer> getAllCustomers() throws CouponSystemException{
        String sqlCommand = "SELECT * FROM customer";
        try{
            Connection con = ConnectionPool.getInstance().getConnection();
            try(
                    PreparedStatement preSt = con.prepareStatement(sqlCommand);
            ){
                List<Customer> customersList = new ArrayList<>();
                ResultSet rs = preSt.executeQuery();
                if(!rs.next()){
                    throw new CouponSystemException("Error has occurred, there are no Customers available");
                }
                do{
                    customersList.add(new Customer(rs.getInt(1), // id
                            rs.getString(2), // First_Name
                            rs.getString(3), // Last_Name
                            rs.getString(4), // Email
                            rs.getString(5))); // Password
                }
                while (rs.next());
                return customersList;
            }
        }catch (SQLException e){
            throw new CouponSystemException("Error has occurred, while trying to get all Customers information", e);
        }finally{
            returnConnection(con);
        }
    }
    @Override
    public Customer getOneCustomer(int customerId) throws CouponSystemException {
        String sqlCommand = "SELECT * FROM customer where id=?";
        try{
            Connection con = ConnectionPool.getInstance().getConnection();
            try(
                    PreparedStatement preSt = con.prepareStatement(sqlCommand);
            ){
                preSt.setInt(1, customerId);
                ResultSet rs = preSt.executeQuery();
                if(!rs.next()){
                    throw new CouponSystemException("Error has occurred, Customer id " + customerId  + " was not found");

                }
                return new Customer(rs.getInt(1), // id
                        rs.getString(2), // First_Name
                        rs.getString(3), // Last_Name
                        rs.getString(4), // Email
                        rs.getString(5)); // Password
            }
        }catch (SQLException e){
            throw new CouponSystemException("Error has occurred, get Customer failed", e);
        }finally{
            returnConnection(con);
        }
    }
    private void returnConnection(Connection c) throws CouponSystemException{
        try {
            if(c != null){
                ConnectionPool.getInstance().restoreConnection(c);
                c =  null;
            }
        } catch (SQLException ex) {
            throw new CouponSystemException("Error has occurred while trying restore the connection" , ex);
        }
    }
}
