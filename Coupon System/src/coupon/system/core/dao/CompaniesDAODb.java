package coupon.system.core.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import coupon.system.core.beans.Company;
import coupon.system.core.connection.ConnectionPool;
import coupon.system.core.exceptions.CouponSystemException;

public class CompaniesDAODb implements CompaniesDAO {

	/**
	 * connection to database.
	 */
	private Connection con;

	/**
	 * Constructs a new CompaniesDAODb Object.
	 */
	public CompaniesDAODb() {
		con = null;
	}

	/**
	 * This method checks if a company with the parameters exists.
	 * 
	 * @param email
	 * 
	 * @param password
	 * 
	 * @return if the entered email and password exist in the database.
	 */
	@Override
	public boolean isCompanyExist(String email, String password) throws CouponSystemException {
		try {
			String sqlCommand = "SELECT id FROM company WHERE email = ? AND password = ?";
			con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand)) {

				preSt.setString(1, email);
				preSt.setString(2, password);

				ResultSet rs = preSt.executeQuery();

				return rs.next();
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred while trying to get a company out of the DB", e);

		} finally {
			returnConnection(con);
		}
	}

	/**
	 * This method adds a company to the database.
	 * 
	 * @param company uses company's name, email and password.
	 */
	@Override
	public void addCompany(Company company) throws CouponSystemException {
		String sqlCommand = "INSERT INTO company values(0,?,?,?)"; // id\name\email\password
		try {
			con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand, Statement.RETURN_GENERATED_KEYS)) {
				preSt.setString(1, company.getName());
				preSt.setString(2, company.getEmail());
				preSt.setString(3, company.getPassword());
				preSt.executeUpdate();
				ResultSet rs = preSt.getGeneratedKeys();
				rs.next();
				int autoGeneratedId = rs.getInt(1);
				company.setId(autoGeneratedId);
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, add company failed", e);
		} finally {
			returnConnection(con);
		}
	}

	/**
	 * This method updates the company's name, email and password where id is equal
	 * to the entered company's id.
	 * 
	 * @param company Uses company's name, email and password.
	 */
	@Override
	public void updateCompany(Company company) throws CouponSystemException {
		String sqlCommand = "UPDATE company SET `name`=?, `email`=?, `password`=? where id=?";
		try {
			con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand)) {
				preSt.setString(1, company.getName());
				preSt.setString(2, company.getEmail());
				preSt.setString(3, company.getPassword());
				preSt.setInt(4, company.getId());
				int rowCount = preSt.executeUpdate();
				if (rowCount == 0) {
					throw new CouponSystemException(
							"Error has occurred, company id " + company.getId() + " was not found");
				}
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, update company failed", e);
		} finally {
			returnConnection(con);
		}
	}

	/**
	 * This method deletes a company with the same companyId from the database.
	 * 
	 * @param companyId
	 */
	@Override
	public void deleteCompany(int companyId) throws CouponSystemException {
		String sqlCommand = "DELETE FROM company where id=?";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				preSt.setInt(1, companyId);
				int rowsCount = preSt.executeUpdate();
				if (rowsCount == 0) {
					throw new CouponSystemException("Error has occurred, company id " + companyId + " was not found");
				}
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, delete company failed", e);
		} finally {
			returnConnection(con);
		}
	}

	/**
	 * this Method returns a List of all companies id, name, email and password from
	 * the database.
	 * 
	 * @return a List of Company from database.
	 */
	@Override
	public List<Company> getAllCompanies() throws CouponSystemException {
		String sqlCommand = "SELECT * FROM company";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				List<Company> compList = new ArrayList<Company>();
				ResultSet rs = preSt.executeQuery();
				if (!rs.next()) {
					throw new CouponSystemException("Error has occurred, there are no companies available");
				}
				do {
					compList.add(new Company(rs.getInt(1), // id
							rs.getString(2), // name
							rs.getString(3), // email
							rs.getString(4))); // password
				} while (rs.next());
				return compList;
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, while trying to get all companies information", e);
		} finally {
			returnConnection(con);
		}
	}

	/**
	 * This method gets a companyId arg and returns that Company's id, name, email
	 * and password from the database
	 * 
	 * @param companyId
	 * 
	 * @return Company's id, name, email and password.
	 */
	@Override
	public Company getOneCompany(int companyId) throws CouponSystemException {
		String sqlCommand = "SELECT * FROM company where id=?";
		try {
			Connection con = ConnectionPool.getInstance().getConnection();
			try (PreparedStatement preSt = con.prepareStatement(sqlCommand);) {
				preSt.setInt(1, companyId);
				ResultSet rs = preSt.executeQuery();
				if (!rs.next()) {
					throw new CouponSystemException("Error has occurred, company id " + companyId + " was not found");

				}
				return new Company(rs.getInt(1), // id
						rs.getString(2), // name
						rs.getString(3), // email
						rs.getString(4)); // password;
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Error has occurred, get company failed", e);
		} finally {
			returnConnection(con);
		}
	}

	/**
	 * This method restores initiates the connection to null and restores it to
	 * ConnectionPool.
	 * 
	 * @param c The Connection Object
	 * @throws CouponSystemExceptionS
	 */
	private void returnConnection(Connection c) throws CouponSystemException {
		try {
			if (c != null) {
				ConnectionPool.getInstance().restoreConnection(c);
				c = null;
			}
		} catch (SQLException ex) {
			throw new CouponSystemException("Error has occurred while trying restore the connection", ex);
		}
	}
}
